package daysteps
// Пакет содержит две функции: 
// одну экспортируемую 
// и одну неэкспортируемую — вспомогательную.

import (
	"time"
)

const (
	// Длина одного шага в метрах
	stepLength = 0.65
	// Количество метров в одном километре
	mInKm = 1000
)



// Функция parsePackage()
// Сигнатура функции: func parsePackage(data string) (int, time.Duration, error) 
// Функция принимает строку с данными, которая содержит количество шагов и продолжительность прогулки в формате 3h50m(3 часа 50 минут). Возвращает три значения:
// int — количество шагов
// time.Duration — продолжительность прогулки.
// error — ошибку, если что-то пошло не так.
// Функция парсит строку формата "678,0h50m", где:
// 678 — количество шагов.
// 0h50m — продолжительность прогулки.
// Переводит эти данные в int и time.Duration соответственно и возвращает их. 
// Алгоритм реализации функции:
// Разделить строку на слайс строк.
// Проверить, чтобы длина слайса была равна 2, так как в строке данных у нас количество шагов и продолжительность.
// Преобразовать первый элемент слайса (количество шагов) в тип int. Обработать возможные ошибки. При их возникновении из функции вернуть 0 шагов, 0 продолжительность и ошибку.
// Проверить: количество шагов должно быть больше 0. Если это не так, вернуть нули и ошибку.
// Преобразовать второй элемент слайса в time.Duration. В пакете time есть метод для парсинга строки в time.Duration. Обработать возможные ошибки. При их возникновении из функции вернуть 0 шагов, 0 продолжительность и ошибку.
// Если всё прошло без ошибок, верните количество шагов, продолжительность и nil (для ошибки).


func parsePackage(data string) (int, time.Duration, error) {
	// TODO: реализовать функцию
}

// Функция DayActionInfo()
// Сигнатура функции:

// func DayActionInfo(data string, weight, height float64) string 
// У функции три параметра:
// data string — строка с данными, которая содержит количество шагов и продолжительность прогулки в формате 3h50m (3 часа 50 минут).
// weight float64 — вес пользователя в килограммах.
// height float64 — рост пользователя в метрах.
// И одно возвращаемое значение — строка (string).
// Функция должна парсить строку с данными с помощью parsePackage(), вычислять дистанцию в километрах и количество потраченных калорий и возвращать строку в таком виде: 

// Количество шагов: 792.
// Дистанция составила 0.51 км.
// Вы сожгли 221.33 ккал. 
// Значения количества шагов, дистанции и калорий — это просто пример.
// Алгоритм реализации функции:
// Получить данные о количестве шагов и продолжительности прогулки с помощью функции parsePackage(). В случае возникновения ошибки вывести её на экран и вернуть пустую строку.
// Проверить, чтобы количество шагов было больше 0. В противном случае вернуть пустую строку.
// Вычислить дистанцию в метрах. Дистанция равна произведению количества шагов на длину шага. Константа stepLength (длина шага) уже определена в коде.
// Перевести дистанцию в километры, разделив её на число метров в километре (константа mInKm, определена в пакете).
// Вычислить количество калорий, потраченных на прогулке. Функция для вычисления калорий WalkingSpentCalories() будет определена в пакете spentcalories, которую вы тоже реализуете.
// Сформировать строку, которую будете возвращать, пример которой был представлен выше.
func DayActionInfo(data string, weight, height float64) string {
	// TODO: реализовать функцию
}
