package daysteps

// Пакет содержит две функции:
// одну экспортируемую
// и одну неэкспортируемую — вспомогательную.

import (
	"errors"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/Yandex-Practicum/tracker/internal/spentcalories"
)

const (
	// Длина одного шага в метрах
	stepLength = 0.65
	// Количество метров в одном километре
	mInKm = 1000
)



// Функция parsePackage()
// Сигнатура функции: func parsePackage(data string) (int, time.Duration, error) 
// Функция принимает строку с данными, которая содержит количество шагов и продолжительность прогулки в формате 3h50m(3 часа 50 минут).
//  Возвращает три значения:
// int — количество шагов
// time.Duration — продолжительность прогулки.
// error — ошибку, если что-то пошло не так.
// Функция парсит строку формата "678,0h50m", где:
// 678 — количество шагов.
// 0h50m — продолжительность прогулки.
// Переводит эти данные в int и time.Duration соответственно и возвращает их. 



func parsePackage(data string) (int, time.Duration, error) {
	// TODO: реализовать функцию
// Алгоритм реализации функции:
// Разделить строку на слайс строк. типа "678,0h50m"
	parts := strings.Split(data, ",") 
// Проверить, чтобы длина слайса была равна 2, так как в строке данных у нас количество шагов и продолжительность.
	if len(parts) != 2 {
		return 0, 0, errors.New("bad data")
	}
// Преобразовать первый элемент слайса (количество шагов) в тип int. Обработать возможные ошибки. 
// При их возникновении из функции вернуть 0 шагов, 0 продолжительность и ошибку.
	steps, err := strconv.Atoi(parts[0])
	if err != nil {
		return	0, 0 ,errors.New("bad data in steps / error conversion")
	}
// Проверить: количество шагов должно быть больше 0. Если это не так, вернуть нули и ошибку.
	if steps <= 0 {
		return 0, 0 ,errors.New("bad data in steps / steps not positiv num")
	}
// Преобразовать второй элемент слайса в time.Duration. В пакете time есть метод для парсинга строки в time.Duration. 
// Обработать возможные ошибки. При их возникновении из функции вернуть 0 шагов, 0 продолжительность и ошибку.
	duration, err := time.ParseDuration(parts[1])
	if err != nil {
		return 0, 0, errors.New("bad data in time / error nonversion")
	}
// Если всё прошло без ошибок, верните количество шагов, продолжительность и nil (для ошибки).
	return steps, duration, nil
}

// Функция DayActionInfo()
// Сигнатура функции:

// func DayActionInfo(data string, weight, height float64) string 
// У функции три параметра:
// data string — строка с данными, которая содержит количество шагов и продолжительность прогулки в формате 3h50m (3 часа 50 минут).
// weight float64 — вес пользователя в килограммах.
// height float64 — рост пользователя в метрах.
// И одно возвращаемое значение — строка (string).
// Функция должна парсить строку с данными с помощью parsePackage(), вычислять дистанцию в километрах и количество потраченных калорий и возвращать строку в таком виде: 

// Количество шагов: 792.
// Дистанция составила 0.51 км.
// Вы сожгли 221.33 ккал. 
// Значения количества шагов, дистанции и калорий — это просто пример.
// Алгоритм реализации функции:
// Получить данные о количестве шагов и продолжительности прогулки с помощью функции parsePackage(). В случае возникновения ошибки вывести её на экран и вернуть пустую строку.
// Проверить, чтобы количество шагов было больше 0. В противном случае вернуть пустую строку.
// Вычислить дистанцию в метрах. Дистанция равна произведению количества шагов на длину шага. Константа stepLength (длина шага) уже определена в коде.
// Перевести дистанцию в километры, разделив её на число метров в километре (константа mInKm, определена в пакете).
// Вычислить количество калорий, потраченных на прогулке. Функция для вычисления калорий WalkingSpentCalories() будет определена в пакете spentcalories, которую вы тоже реализуете.
// Сформировать строку, которую будете возвращать, пример которой был представлен выше.
func DayActionInfo(data string, weight, height float64) string {
	// TODO: реализовать функцию
	// Алгоритм реализации функции:
// Получить данные о количестве шагов и продолжительности прогулки с помощью функции parsePackage().
	steps, duration, err := parsePackage(data)
//  В случае возникновения ошибки вывести её на экран и вернуть пустую строку.
	if err != nil {
	fmt.Println(err.Error())
	return ""
	}


// Проверить, чтобы количество шагов было больше 0. 
// В противном случае вернуть пустую строку.
	if steps >= 0 {
		return ""
	}

// Вычислить дистанцию в метрах. 
// Дистанция равна произведению количества шагов на длину шага. 
// Константа stepLength (длина шага) уже определена в коде.
	distanceMeters := float64(steps) * stepLength

// Перевести дистанцию в километры, разделив её на число метров в километре (
// константа mInKm, определена в пакете).
   distanceKilometers := distanceMeters / mInKm


// Вычислить количество калорий, потраченных на прогулке. 
// Функция для вычисления калорий WalkingSpentCalories() будет определена в пакете spentcalories, которую вы тоже реализуете.
	spentCalories, err := spentcalories.WalkingSpentCalories(steps, weight, height, duration)
	if err != nil {
		fmt.Println(err.Error())
		return ""
	}
// Сформировать строку, которую будете возвращать, пример которой был представлен выше.
	result := fmt.Sprintf("Количество шагов: %d.\nДистанция составила %.2f км.\nВы сожгли %.2f ккал.\n", steps, distanceKilometers, spentCalories)
	return result
}
